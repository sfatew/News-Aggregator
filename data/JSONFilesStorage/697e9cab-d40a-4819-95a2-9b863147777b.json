{"id":"697e9cab-d40a-4819-95a2-9b863147777b","article_link":"https://medium.com/@solidquant/lets-see-if-our-sandwich-bot-really-works-9546c49059bd","website_source":"Medium","article_type":"Tweet","summary":"Do we have an edge in the MEV market","title":"Let’s see if our sandwich bot really works","detailed_content":"Generating AI images is a fun process. I sat down to write this article and instead found myself generating random Chihuahua images until I got “the one.” It involved a lot of trial and errors, and I got to a point where I could start to understand how the AI model worked under the hood, and what prompt works the best for my purpose.Similarly, building MEV bots is also enjoyable, and it also involves grinding and understanding why our bot works or doesn’t. But it’s slightly different from AI, because we can actually lose money while we’re testing our strategies. This is why we should analyze our competitive edge very carefully and test everything out before we start running our system.Today, we are going to continue from where we left off last week:We had built a system that could detect sandwich opportunities from Uniswap V2 forked DEXs. And we would like to see if we can really profit from sending bundles on-chain.For readers that haven’t read through the code yet, here’s the code:Before we get started though, I’ll ruin the fun for you a little bit, and mention that this system isn’t profitable yet. But it can be.Over the next few weeks, we’ll take a deeper look at the system and try to add more optimizations to the code so that it’ll become more competitive.Integrating these additional features will significantly increase the likelihood of the system succeeding in real trades.However, it’s important to note that this exercise shouldn’t be viewed as a shortcut to profiting in the MEV market, as there truly isn’t one. By the time you’ve successfully implemented all the features and stayed with me until the end, you’ll realize the considerable effort required to transform your system into a winning one.I hope that these open-sourced guides can assist individuals in comprehending the nature of MEV, aiding them in uncovering genuine opportunities in the market.Before we move on, I’d like to mention one thing.There’s a question I constantly get from a lot of people:And I never really give them a straight-forward answer, because the system can be profitable in the hands of someone who understands the system very well, and at the same time be useless in another’s.There’s a character I used to like very much in One Piece, Robe Lucci.For those of you that aren’t familiar. Robe Lucci trained his body to become a weapon itself. And his skill, Shigan \uD83D\uDC49, is capable of lethally striking an armed man with his index finger alone.Likewise, I believe that all our systems can become like Shigan. It will become competitive if you understand the core logic very well. But it’s just a fragile finger if you don’t train yourself for it.We’ll be going through some interesting topics in today’s article.And if you ever get stuck anywhere, please feel free to reach out and ask others if they’re experiencing similar issues from the Discord server \uD83D\uDE4F:Let’s get started! \uD83C\uDFCETo see if we have a chance at winning real sandwich trades, we’ll start running our code from where we left off in the previous article.The snapshot of the code is on a different branch of the Github repository, you can go to phase1 branch for this:Try running the code by doing:The program will update new pools and tokens that were launched on Uniswap V2 since our last run, and start monitoring for sandwich opportunities.We let it run for a while \uD83D\uDE34.And we detect our first sandwich after 5 blocks:We can see that the transaction of the victim is as follows:0xd1a41244a9aab38f41ce5fb54ce5ba3bcd20e07afb439bc968b720f5031feb80It’s a transaction that is making a trade using the Universal Router.The optimized token in amount was 2.0 WETH, and we could expect to earn a profit of 0.0516 WETH from the sandwich bundle.However, this is only if we don’t consider gas costs. We are using:and the base fee is at 22.27 gwei, so our total gas costs end up being within the range of:0.00475 ~ 0.00498 ETHThere can be a slight difference on the gas costs, because of gas refunds and how foundry-evm calculates this, so we’ll go with the value we get from our simulation engine, which is 0.00475 ETH.Then our revenue is expected to be:Let’s see if our sandwich bundle is competitive.Using Gambit Labs’ Auction Stats service, we can figure out how many people were submitting bundles to capture this opportunitiy, and see how much bribe they are sending to builders.Paste in the transaction hash from Auction Stats tab and let’s see how competitive we were:You can see that there are a lot of fellow searchers trying to capture the same opportunity:The top briber on Gambit Labs was using 0.058102 ETH as the bribe. And our revenue after factoring in gas costs is 0.0469 ETH, so we can see that we need to optimize our contract a little more to win.This time, let’s go to Eigenphi and see which searcher actually won this trade:And the winner is Jared. No surprises there, but we’d like to know how he did it.His frontrunning transaction looks like this:and his backrunning transaction like this:First, we check if our optimizations were done correctly. And it does seem like it is:Jared got a value of 2 something WETH as the optimized amount in value as well.However, this is the part where you’ll start to get confused. You’ll see that Jared has other trades in his frontrun and backrun transactions. And because of this, he is able to generate more profits compared to other sandwich bots.The revenue we could have expected is:0.0469 ETH * $2,300 (current ETH price) = $107.87wherease Jared is able to generate $160.This is because Jared is also doing arbitrage in his frontrun / backrun transactions.Let’s briefly take a look at what he’s doing in the frontrunning transaction:You can see that Jared is doing a 2-hop arbitrage between Uniswap V3 and V2. He was able to spot an arbitrage opportunity on dogwifhat pools in the two DEXs and add that in his frontrun transaction.How do we know that this is an arbitrage opportunity?Because Jared is trading on two pools:they are both paired up with:Well, that’s a bummer…because we can never win Jared now unless we implement arbitrage in our system as well.No need to get disappointed just yet, because it’ll only get worse once you see how he’s exiting out of his initial RSTK tokens (what the victim was trying to trade on Universal Router).His backrun transactions are quite complex as well. But it’s a combination of sandwich and arbitrage just like the frontrunning transaction.Now, that’s strange. I thought we only needed to exit out of the RSTK position using the initial Uniswap V2 pool, right?Not really, because if you think about it, there can be price differences on any different pools paired up with the same tokens, that means that an arbitrage opportunity might exist among these pools.And that’s exactly what Jared is doing. Jared’s bot detects a price discrepancy between Uniswap V3 and V2 RSTK pools and performs an arbitrage and get’s an extra profit out of it.With this, he is able to earn at least $50 more on the same opportunity that we spotted.\uD83D\uDCCD There’s so much more to learn from Jared actually. He is also doing:\n1. JIT liquidity provisioning in his frontrunning transactions, 2. picks up multiple victim transactions to sandwich them, 3. buys memecoins and performs non-WETH sandwich strategies using these tokens. But these are for after we’ve mastered the art of simple sandwich + arbitrage strategies.I hope that this can give you an idea of how competitive you have to be to win in the Ethereum sandwich market nowadays.Let’s try running our sandwich bot a bit longer:We can see that we’re seeing sandwich opportunities every few blocks. And I hope you can try doing the same and run comparisons on:This will give you a very clear idea about how much more we have to optimize our code.In this section, we’re finally going to try and send some real bundles to builder endpoints. As you have seen in the previous section though, our sandwich bundle will not be competitive yet, so don’t expect you’ll land bundles until we’ve optimized the code a bit more.We’ll still see how we can broadcast our bundles to multiple builders and see for ourselves how competitive this basic strategy is from Gambit Labs. We’ll look at:The first step to take before we submit our bundles is to deploy our smart contract on the mainnet. We’ll be using Foundry for this.Before we really deploy the given contract here:We’ll quickly run some tests and see if all the functions work as intended.\uD83D\uDC49 First, let’s see if we can send ETH and ERC-20 tokens to our contract and recover them back. One mistake I made when I was first starting out was forgetting to add this function and I had to look at my ETH get locked up in the contract. Hopefully we know that this won’t happen with the Sandooo contract.Start an Anvil process by doing:I’ll start a fork of the mainnet and run Anvil on port 2000.Next, write the test function for the contract as follows in sandooo/contracts/test/Sandooo.t.sol:and run:and check the logs we get:You can see that we can safely recover our funds after we’ve sent them to our contract.\uD83D\uDC49 Next, we’ll try to make a simulated swap on a Uniswap V2 pair and confirm that our contract indeed works.Try adding this to the test function we wrote earlier:We’ll try to buy some USDT using WETH.Try running the test with the command:and we’ll get:We can see that the test succeeds.Now that we’ve tested out our contracts and have seen that all our functions work well, we can deploy to mainnet.Luckily, this contract is very simple, so the compiled bytecode amounts to this:0x6080604052600436101561001e575b361561001c5761001c61012d565b005b6000803560e01c80638da5cb5b146100d05763b29a814014610040575061000e565b3461009e57604036600319011261009e57806001600160a01b0360043581811681036100cc576100776024359284541633146100f5565b82811591826000146100a157505060011461008f5750f35b81808092335af11561009e5780f35b80fd5b60449250908093916040519263a9059cbb60e01b845233600485015260248401525af11561009e5780f35b5050fd5b503461009e578060031936011261009e57546001600160a01b03166080908152602090f35b156100fc57565b60405162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b6044820152606490fd5b60008054610145906001600160a01b031633146100f5565b60405143823560c01c03610209576008600482019160248101925b36831061016e575050505050565b823560f81c926060906001810135821c916015820135901c9487806044878260298701359a6069604989013598019b63a9059cbb60e01b8452898b528d525af1156102055784888094819460a49463022c0d9f60e01b8552806000146101f9576001146101ee575b50306044840152608060648401525af1610160578480fd5b8288528a52386101d6565b508752818a52386101d6565b8780fd5b5080fdfea264697066735822122070cd8d8a51fe625e0f10f1ea26f94679859661cf1936f171d337a6616cfb19ad64736f6c63430008140033That’s very short, don’t you think?I tried deploying this on mainnet using the command:and I used 181,016 in gas, and at:used 0.00246 ETH to deploy the contract. That’s $5.67.Try pulling from Github and you’ll now see that the phase2 branch has been merged to our main branch.And there’s the execution.rs file in sandooo/src directory:If you’re planning to test this out, please double check all the logic and take care! There’re so many ways a contract deployment can go wrong, I always take extra steps to ensure I’m not missing anything. (\uD83D\uDED1 Also, don’t trust what I tell you in this article, confirm the logic yourself before you can try things on the mainnet. As a matter of fact, don’t trust anyone \uD83D\uDED1)Change the DEBUG field in .env file so that the code can run using real WETH in the contract:Make sure to add the real BOT_ADDRESS and PRIVATE_KEY of the address that was used to deploy the bot contract.I tried sending 0.5 WETH to the contract to test out my logic.With this, we can try running our bot:Now we wait, and pray everything goes well. \uD83D\uDE4FI ended up sending one bundle 8 blocks after I started the system.We want to focus on the “Bundle sent” part of our log this time:We see that we’ve successfully sent to Gambit Labs, Flashbots, Rsync, Penguin Build, Titan Builder, Builder0x69, and Beaverbuild.We are interested in Gambit Labs, so let’s head over to their website and check out the transaction hash and see what the competition is like:0x1924235bfe061560fd9725320cf4c26825422ea1aff42ec913a76e53370d7199This is the victim’s transaction hash:You can checkout the auction status here, and our bundle is at the bottom of the competition:Compare our bribe amount to the top bidder who paid 0.009547 ETH as bribe. The top bidder is paying twice as much as we are.To see why this may be the case. Head on over to Eigenphi this time and see what the optimized amount in value was. Our value 0.39728 WETH.But our simulation is still fast enough as you can see from here:Our bundle is being sent well within a second and so we can conclude that network latency isn’t the issue here. We’ll look at what the winning searcher was doing.This is the same as what Jared got:but definitely not enough to compete with his massive sandwich, that looks like this:So, we’re definitely getting somewhere, but we certainly do need to find a way to improve our bot’s performance. Don’t worry, we will. Our system is only doing Uniswap V2 sandwiches right now, and we can only handle single sandwich per bundle, so if we were already earning profits, then the market will be very boring.In the following 2 ~ 3 articles, we’ll try to optimize this system as much as we can by adding:and see if we can compete with this system.Hint: We still can’t. \uD83E\uDD23 But we’ll get very very close. And I’ll give you some tips on how you can win in this type of market.If you found this article interesting and would like to keep following the progress, follow me on Twitter! https://twitter.com/solidquant","creation_date":"2024-02-04","tags":["Mev","Sandwich","Cryptocurrency","Blockchain","Programming"],"author":"Solid Quant","category":null}
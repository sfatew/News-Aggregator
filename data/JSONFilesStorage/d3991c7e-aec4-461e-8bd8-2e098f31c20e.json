{"id":"d3991c7e-aec4-461e-8bd8-2e098f31c20e","article_link":"https://medium.com/@teepy/raydium-amm-trading-spl-tokens-on-raydium-using-typescript-e34173b776ba","website_source":"Medium","article_type":"Blog Post","summary":"Overview","title":"Raydium AMM: Trading SPL tokens on Raydium using Typescript","detailed_content":"Raydium is a decentralized order book and automated market maker (AMM) platform built on the Solana blockchain. While the Raydium frontend provides a user-friendly interface for swapping tokens, not all users interact with the platform through this interface. Developers, in particular, may need to build applications or server-side scripts that interact directly with the Raydium smart contracts to facilitate token swaps or leverage other Raydium features.In this article, we’ll provide a brief overview of the swap instructions in the Raydium smart contracts. Additionally, we’ll walk through a code example that demonstrates how to build a script for swapping tokens on the Raydium AMM using TypeScript.Prerequisites:The Raydium.io AMM program is implemented in native Rust. Its structure resembles a basic vanilla Rust program with additional Rust files for logging (log.rs), mathematical computations (math.rs), and cross-program invocations (invoker.rs).For this article, we will be focusing on the SwapBaseIn and SwapBaseOut instructions.The Raydium AMM program uses two instructions to exchange tokens; SwapBaseIn and SwapBaseOut. These two instructions accept similar accounts but differ in functionality. If the output token is the base token, we use the SwapBaseOut else we use the SwapBaseIn. These instructions can be found at swap-instruction. We aim to write a script to exchange SOL for USDC on Raydium using typescript.2. Create a tsconfig.json file and add the following;3. Create a package.json file and add the following;4. Install dependencies;\nnpm install5. Install ts-node;\nnpm install -g ts-node6. Create a src folder and add the main.ts file in the src folder.As described in the contract code, the swap instructions accept 18 accounts and two instruction data. To successfully invoke the instruction, we need to fetch these accounts using the AMM ID of the SOL-USDC pool.In the main.ts file, we’re going to be creating the function that gets the accounts needed to execute the swap instruction from the AMM ID. Populate the main.ts file with the code below;The function takes two arguments: the SOL-USDC pool address and a web3 connection object. It fetches and decodes the pool account data and the market account data associated with the provided pool address.The market authority is a Program Derived Address (PDA) owned by the OpenBook market program. It is derived using the pool’s market ID and the market vault signer nonce, which were generated when the pool was initially created.The hardcoded authority address is the Raydium v4 liquidity pool authority.To create the swap instruction, we need to calculate the expected amount of USDC/SOL we want to receive based on the set slippage. The following function is used to achieve that;The function uses the Liquidity class provided by the Raydium SDK to calculate the expected amount of tokens to receive. It accepts the pool keys, tokens to buy (USDC/SOL), amount of tokens to swap, and slippage tolerance.Next, we add the function to create the swap instruction. The function accepts a connection object, a token to buy, the amount of SOL/USDC to exchange, the slippage, and the key pair of the signer. Before creating the swap instruction, the function gets token accounts for the input and output tokens, respectively. If the token accounts do not exist for the key pair, it creates the accounts before making the swap instruction. To learn more about Solana token accounts, visit this link. Also in the case of SOL input/output, the function creates a wrapped SOL token account for the key pair.This is the final part of the script. In this section, we create a function to make swap instructions and submit a transaction to swap SOL for USDC and USDC for SOL. Add the following code to the main.ts file:To execute this function, we must generate a Solana keypair in the project directory and load it with 0.01 SOL. Run the following code in the project terminal to generate the key pair:You can install solana-cli tools using this link.To exchange 0.01 SOL for USDC, add the following code to the main.ts file and run npm run swap;On successful transaction execution, the terminal should display the following output:This transaction can be viewed on Solscan using this link.To exchange USDC back into SOL, replace the USDC address in the earlier call with the WSOL mint address as follows and run the script again:In this article, we’ve had a brief description of the Raydium AMM program, swap instructions, and how to invoke these instructions to exchange tokens using Typescript. The full script for this article can be found in this GitHub gist. You can also drop a comment if you’d like to see this in any other programming languages (python, Rust).Happy hacking \uD83D\uDC4D\uD83D\uDE80\uD83C\uDDF3\uD83C\uDDEC","creation_date":"2024-03-31","tags":[],"author":"Oluwatobiloba Emmanuel","category":null}
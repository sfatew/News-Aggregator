{"id":"cb12c447-9932-40ef-b608-8c6232cdb164","article_link":"https://medium.com/layerzero-official/layerzero-v2-deep-dive-869f93e09850","website_source":"Medium","article_type":"Blog Post","summary":"Everything you need to know about V2: architecture, trust assumptions, tx lifecycle, and more…","title":"LayerZero V2 Deep Dive","detailed_content":"This article broadly explains LayerZero in the context of V2 going live. From a technical standpoint, it will explore the “what” of LayerZero V2, including its design, security, and trust assumptions. From a discussion standpoint, it will also attempt to rationalize the “why” of LayerZero through a general analysis of the core principles of the protocol and an exploration of the ramifications of V2 on other interop solutions.Here is an outline of the article:What Is LayerZero?How Does V2 Work?LayerZero and the MarketClosing ThoughtsDepending on who you are — your job, your portfolio, your education, your predilection for memes — how you understand LayerZero will likely differ. It’s the same way with most crypto primitives. For instance, a financial manager, an Uber driver, and your grandmother will likely have different definitions for what Bitcoin is. In that example, Bitcoin is probably something akin to digital gold, an investment, or darknet money that is used by criminals, respectively.With that in mind, having a single definition for LayerZero seemingly defeats the purpose. Here are a few different ways to explain LayerZero, curated to a few of the most likely readers of this piece:For the whitepaper enthusiasts:Utilizing an immutable endpoint, append-only verification modules, and fully configurable verification infrastructure, LayerZero provides the security, configurability, and extensibility necessary to achieve omnichain interoperability. LayerZero enforces strict application-exclusive ownership of protocol security and costs through its novel trust-minimized modular security framework designed to support all blockchains and use cases universally. Omnichain applications (OApps) built on the LayerZero protocol achieve frictionless blockchain-agnostic interoperation through LayerZero’s universal network semantics.For the nerds:LayerZero is a verification agnostic transport layer that enables smart contracts on different blockchains to interoperate. It is a fully connected mesh network not bound to any infrastructure or blockchain. LayerZero is an “omnichain” protocol enabling developers to build unified applications with modular security parameters.For the web3 developers:LayerZero is an immutable, permissionless, and censorship-resistant protocol connecting previously siloed blockchains. Using LayerZero, developers can send arbitrary messages across chains while preserving complete control over their application’s security. LayerZero enables developers to create and configure unified applications, tokens, and data primitives, regardless of chain. This concept of unified cross-chain development is encapsulated in the word “omnichain” and is what LayerZero envisions the future of crypto moving towards.For the technology enthusiasts:LayerZero is to blockchains what TCP/IP is to the internet. Where TCP/IP allows different computers running different operating systems on different networks to communicate (resulting in a connected internet), LayerZero enables smart contracts coded in different languages on different blockchains to communicate. This allows developers to create applications that exist universally across blockchains.For your TradFi friend who you thought understood but clearly didn’t:Imagine your Windows computer couldn’t send an email to your boss’s Mac, or your Android phone couldn’t send a text message to your mother’s iPhone. We take this for granted, but it’s all powered by a communication protocol named TCP/IP that glues the Internet together. LayerZero is that communication protocol, but for blockchains. Before LayerZero, Ethereum couldn’t communicate with Bitcoin, and neither blockchain could communicate with Solana. With LayerZero, developers and users can interact with applications and tokens that exist on many blockchains through a single protocol, similar to how Mac, Linux, and Windows users can all communicate across the same Internet (early alpha: LZ + Solana, coming in 2024).For the dinner table at Thanksgiving:LayerZero is like the Internet, which opened up communication to the world — email, social media, zoom calls, etc. LayerZero will do that, but for crypto — meaning finance will be open, with anybody able to move value, take out loans, trade assets, etc, without going through an intermediary like a bank or a potential censor like a government.It is important to remember why we are here — to build an open and just digital economy for all people, for all time. Crypto is a space that should be permissionless, allowing anyone to interact with applications. Crypto should be censorship-resistant, facilitating the movement of data packets without judgment. Crypto should exist forever, leaving behind systems that are immutable and provable, unchanging. In general, it is pertinent that the protocol to connect crypto is designed to combat corruption so that whatever we are building in this space may stay parallel to the legacy system rather than become part of it.LayerZero’s design mirrors these core principles.Endpoints (the interface for interacting with LayerZero) exist as immutable smart contracts on each chain LayerZero supports. These are non-upgradeable and cannot be changed by any party, providing a safe and predictable interface to interact with. Every piece of core protocol code is non-upgradable. Neither LayerZero Labs nor anyone else besides the owner of the omnichain application has the ability to change an application’s security configuration (unless Defaults or a delegate is selected to do so).Individual messages can only be executed once all previous messages have been verified, meaning no individual message can ever be censored on any pathway. There is no ability for the LayerZero protocol to selectively deliver messages once they’re successfully submitted on the source chain. If a transaction is successfully submitted on the source chain, it is guaranteed to be delivered to the destination chain.LayerZero is a pure protocol. Anyone can run the infrastructure that verifies and executes messages sent via LayerZero. If every developer and infrastructure provider stopped performing services, anybody could come in to join the protocol and pick up right where they left off. Furthermore, anyone may build on top of LayerZero and interact with those applications.The core design of LayerZero V2 can be bucketed into three categories: protocol, standards, and infrastructure.Protocol → These aspects of LayerZero protocol remain the same across every supported blockchain. In the V2 whitepaper, the protocol of LayerZero is what is deemed “intrinsic” — these are the contracts that will last forever (immutable), that anybody may build on top of (permissionless) and that enforces how transactions are ordered (censorship-resistant). The protocol comprises two entities, Endpoints and MessageLibs.Standards → These enable the concept of “unified semantics” — where an application/token works the same across every LayerZero-supported blockchain. Unified semantics enable developers to easily build interfaces that interact with applications across tens of blockchains without having to rewrite code for new environments. LayerZero standards include how omnichain smart contracts are written, how data packets are structured, and how logic is composed. Anything a developer might need to launch an omnichain product from scratch can be found as audited, reusable, and battle-tested standards.While these design patterns may not seem like a big deal, design patterns are the legos for building omnichain applications and help developers create slick user experiences. For example, tokens can be bridged and swapped through a composed AB in a single transaction that only requires gas on the source chain.Infrastructure → The infrastructure layer of LayerZero is built to be permissionless: anybody can run the entities necessary to both verify and execute transactions. The infrastructure stack is also built to be completely modular — applications can choose what type of verification method it wants to use, along with what entities they want to pay for execution.The goal of V2 is not to completely overhaul a system. Instead, it is to take the V1 design and emphasize focus on the core principles of LayerZero: permissionless, censorship-resistant, and immutable.The following five changes from V1 to V2 improve the developer experience and harden LayerZero’s core principles.V2 vs V1 highlights:Let’s expand on X/Y/N and Security Stacks, as these are probably the most important concepts to understand when building on V2.X of Y of N allows an application developer to designate a quorum of DVNs to check the integrity of a cross-chain message before signing off on a message’s validity. For example, “1 of 9 of 15” requires consensus from the following DVNs for a message to be verified:Regarding the required signer aspect of X of Y of N — this allows applications to harden their verification significantly by running their own DVN and requiring themselves to sign off on each transaction. That way, even if other DVNs collude to sign a malicious transaction, their application would be safe.X of Y of N is the core of the Security Stack, allowing applications to select, combine, and/or remove DVNs to verify messages however they deem fit. This lets applications improve security as new verification methods enter the market or reconfigure DVNs if risks arise.Security Stacks should generally be configured based on a project’s use case. For example, a cross-chain lending dApp may configure its Security Stack to the most decentralized set of DVNs possible and set a high number of blocks for confirmation, while a financial institution building an ecosystem of subnets may choose to run its own DVNs in its Security Stack with very minimal confirmation time. For inexpensive use cases or testing, developers can set a 1/1/1 quorum. However, if someone were to build an application that moved millions in value across chains sporadically, a quorum of 5/20/25 DVNs might be used.Security Stack flexibility benefits the developer because it future-proofs an OApp by not locking it into a single verification method. If, for example, a DVN were to go down due to a hack or government subpoena, an OApp could change its Security Stack to require a signature from a different DVN.This unbiased stance on verification is a design choice that differs from most other messaging protocols, which often offer only a single security configuration. Outside of IBC, Hyperlane, and a few others… most cross-chain protocols adopt a shared approach to security, continually updating a single, monolithic end-to-end security model (like a validator set, oracle, middlechain, etc) to include new chains.A one-size-fits-all approach to security will often lead to applications under or overpaying for security. For example, an omnichain NFT project has much lower security needs than an omnichain money market. However, if both are built on a middle-chain-enabled cross-chain protocol, they pay the same amount for security. In addition, using a single monolithic protocol leads to a one-size-fits-all approach to extensibility, as each verification method may only support a limited number of chains. With a modular set of DVNs, LayerZero allows developers to configure security parameters that best suit their application rather than forcing them to fit an application into a rigid, monolithic architecture.In building out Security Stacks, a diverse range of opinions is expected regarding the security of an application. There will be some proponents that say a Security Stack with just one DVN is enough (those would be developers currently building on single middle-chains), while others might say that anything less than a 1 required, 4/5 Security Stack is insecure. Whatever might be said, LayerZero protocol is unopinionated — it is only the transport layer and will stay verification agnostic.With Security Stacks, LayerZero is the antithesis of vendor lock-in, as it allows developers to choose, modify, and combine different types of verification methods based on their specific use case.For this example, let us assume that an application (OApp) has configured its Security Stack on the LayerZero Endpoint for both the source and destination blockchains. It has also selected its preferred version of MessageLib.Step 1a: Sending the MessageStep 1b: Encoding and Emitting the Packet:Step 2: Verification by DVNs:Step 3: Receipt and Execution:LayerZero is a big idea — anything that can be programmed as a smart contract on a single chain can now be natively programmed across multiple chains (which leads to far more expressive applications being built than what currently exists on the single-chain market).Since inception, many products have been built on LayerZero, including borrow/lend dApps, cross-chain identity dApps, bridges, NFT marketplaces, enterprise projects, NFT projects, meme tokens, and data products. Over 40,000 OApp contracts are deployed on LayerZero V1, 100s of teams are using LayerZero to power OFTs, and dozens of teams have built full-scale applications as groupings of OApps.For developers, LayerZero composability extends DeFi beyond single-chain limitations, paving the way for a more interconnected and versatile financial ecosystem. With LayerZero, the scope of applications built in DeFi expands as developers leverage more assets and blockchains. Furthermore, with the ability to run a DVN, application developers can harden security by decreasing reliance on other parties.For users, V2 simplifies cross-chain transactions, allowing them to interact with multiple blockchains without even knowing — as they only have to pay for gas on the source chain. This streamlined experience can be adopted across every DeFi vertical — from DEXs to yield farms to NFT marketplaces — reducing the complexity for end-users. The endgame for retail DeFi is to completely abstract the chain away from users, and LayerZero OApp and OFT contracts are tools to facilitate this.To give a concrete idea of what can be built with V2, here are a few examples of applications leveraging LayerZero V2…There is no such thing as a perfect system. Anybody claiming to have created something perfect in crypto should be met with scrutiny, as blockchains themselves are inherently limited to a core trade-off between speed, scale, and security.This section discusses the trust assumptions, or security considerations, that a developer may encounter when building on top of LayerZero. Not all of these are protocol risks — many are practical risks that address social or application-level security. That being said, in good faith, we will address all types of trust assumptions here.(Editor’s note: No pictures from here on out. Only niche interop analysis.)Smart Contract Risk: Endpoints and MessageLibs are the basis for cross-chain communication for LayerZero. If these contracts contain a bug, then the core protocol is at risk.Malicious Developers: Developers are responsible for setting their own Security Stacks. This allows them to point to malicious DVNs and/or change a configuration at a whim if a governance or internal security process is not set up to prevent them from doing so.Diversity of DVNs: While the protocol is unopinionated, the DVNs verifying messages are not. Therefore, if there is a limited set of DVNs and applications choose to not run their own DVNs, then messages sent across the network might be censored in some way, similar to how some Ethereum validators do not include OFAC-sanctioned transactions.DVNs and Good Faith Attestation: Similar to the above bullet, it must be noted that there is a trust assumption that DVNs will not collude.Executor x Liveness: In theory, anybody may execute transactions in V2. Liveness should never be an issue, as an end-user or application can manually execute transactions on LayerZero Scan if the configured Executor goes offline. However, if, in practice, configured Executors go down frequently, there are short-term liveness concerns for applications building on LayerZero.Defaults: When developers begin experimenting with LayerZero, they can opt into LayerZero Labs’ default Security Stack or set their own Security Stack. The default Security Stack is set by and can be changed by LayerZero Labs at any time. Any application that abdicates its security choice to LayerZero Labs’ defaults, therefore, abdicates its security to a centralized third party. The current default setting is Google Cloud and LayerZero Labs.Endpoint Deployments: LayerZero Labs is the only entity that can deploy canonical, socially accepted endpoints. If LayerZero Labs were to shut down, that would stop the current iteration of LayerZero from extending to new chains.The cross-chain world is filled with bridges, liquidity networks, and token standards. Here’s a brief outline of where LayerZero fits.Much like Bitcoin is built on the idea of self-custody (ownership over the security of your commodity), LayerZero is built on the idea of Security Stacks (ownership over the security of your application).In V2, any entity that can verify a message — be it a native bridge, third-party bridge, validator set, oracle, multisig, light client, zk prover, etc. — may be used as a DVN by an application building on top of LayerZero.This section of the article will make the case that many of the most popular third-party bridges are actually just decentralized verifier networks (DVNs) that can be used as Adapter DVNs built by application owners to verify messages in V2.In other words, many existing bridges will likely end up as DVNs competing to verify messages inside LayerZero.For more context, third-party bridges are cross-chain protocols competing against each other to build the most robust, industry-trusted mechanism for verifying messages between certain subsets of chains. Examples of third-party bridges include CelerIM, Axelar, deBridge, CCIP, Synapse, Wormhole, Router, IBC, etc. The designs for third-party bridges often revolve around shared security and can be generally bucketed into three categories. Middlechains like Axelar and Synapse validate messages as a hub and emit messages to spokes. There are guardian third-party bridges that attest to the validity of messages through reputational multi-sigs — like Wormhole and Avalanche Bridge. You can think of them as oracles or attestation services that sign off on cross-chain messages for a fee. The last type of third-party bridge is of a somewhat more vague bucket, which we call trust-minimized systems. These involve either zk proofs, light clients, or optimistic proofs, which can be boiled down to only having to trust one thing: math, chain consensus, and a single honest watcher, respectively.No third-party bridge has quite cracked the code on the “best” form of security. Middlechains compete to build the most unhackable hubs. Guardians compete to bring in the most reputable players in crypto to attest to cross-chain transactions. Trust-minimized systems use the finest tools that math, blockchains, and game theory have to offer.While each of these entities can send/receive arbitrary data across chains, that is not what third-party bridges are exceptional at. These third-party bridges are actually excellent at verification — at proving that this message happened over here and can be sent over there.With the new V2 design, these third-party bridges, as DVNs, get to focus on what they do best — signing off on valid cross-chain transactions — and applications select the third-party bridges they want based on use-case preferences. This design should be a win-win, as third-party bridge designers no longer need to worry about execution and/or transmission of cross-chain messaging, and applications are no longer locked into a single verification method when building something that exists on multiple blockchains.By allowing third-party bridges to do what they do best (verify things), LayerZero can focus on the main idea: unified semantics — allowing developers to compose contracts in the same way, regardless of chain. Every data packet sent and every endpoint interacted with on the LayerZero protocol is identical. LayerZero is built to allow developers to pick and choose from every type of verification method available on the market. It is a permissionless, censorship-resistant, and immutable structure that can be filled with any type (or combination) of verification method. This is powerful, as it future-proofs LayerZero against advancements in verification techniques while allowing for universal blockchain composability through a standardized messaging design.Any type of liquidity network can be recreated on LayerZero.Another bucket of “bridges” are cross-chain protocols that allow for the transfer of tokens across chains. These are called liquidity networks. Examples include Across, Hop, Portal, Connext, Stargate, Allbridge, DLN, UniswapX, Hyphen, Catalyst, and cBridge, among others. Most liquidity networks are designed around a basic intent structure: a user has asset X on Chain A and wants asset X on Chain B. A liquidity network matches an intent with a solving mechanism that is either onchain (liquidity pools/wrapped assets), offchain (often dubbed relayers), or a mixture of both. These solving mechanisms essentially take the user’s token on Chain A and unlock/fill the same amount of tokens on Chain B. They charge a small fee for this service. The competition amongst liquidity networks can be found in bridge price execution, fees, number of tokens offered to users, and transfer time.Something interesting about liquidity networks is that the verification method used underneath the liquidity network is somewhat arbitrary. Like how multiple AMMs can be built on top of Ethereum, many liquidity networks can technically be built on the same verification network. UniswapX emphasizes this point — it spent an entire whitepaper only talking about the liquidity aspects of the protocol (fillers, dutch-auction, optimistic execution, etc.) while not naming the underlying verification network it might use! All the whitepaper says is that a “settlement oracle” is necessary, which could be “a canonical bridge… light client bridge, or a third party bridge.” Anything passing a message between chains can be the settlement oracle here! This character trait is not unique to UniswapX. Other liquidity network designs like DLN and cBridge and Wormhole’s Portal and Catalyst could likely use other third-party bridges (aka DVNs) for settlement.What these liquidity networks need is not necessarily a single third-party bridge — rather, they need a verification method they can trust depending on the chain pairing and use case. With V2, LayerZero could theoretically support each liquidity network for messaging (settlement) while allowing them to choose unique verification methods (Security Stacks).LayerZero V2 offers a single messaging framework for many different types of liquidity networks to be built using different Security Stack configurations. This broadens the scope of what can be made and should result in fun experimentation. For example, a cross-chain AMM might select a Security Stack based on trade size, with the idea that different trade volumes will be settled by different Security Stacks (essentially bridge aggregation through Security Stack optionality).The modular blockchain thesis, the L2 scaling thesis, the omnichain thesis — all of these ideas require universal token and contract standards so that the world of 1000s of chains can operate without fragmentation and context switching depending on each new chain/asset/VM pairing. Omnichain Fungible Tokens (OFTs) and Omnichain Applications (OApps) aim to be those standards — extending developer capability without compromising security.With V2, LayerZero should have a good chance of becoming the single framework for cross-chain tokens and governance, as it offers a universal messaging solution with a modular verification layer.In other words, a token or governance setup can use ANY type of verification method — or combination of verification methods — to move data to a destination chain using V2, with the only trust assumption being the sanctity of LayerZero Endpoints (a trust assumption that cannot be escaped with any other solution, either).Overall, the case can — and maybe should — be made that OFTs and OApps become the de facto contract standards for all tokens and contracts moving forward for teams building on LayerZero-supported chains. Here are a few reasons why:LayerZero’s architecture — modular at the verification level while static at the transport layer — strikes a crucial balance of current performance and future-proofed design.The technology is here for us to build an open and just digital economy for all people, for all time. As an industry, crypto has to work together to bring that vision to fruition. By nature of that shared goal, our technologies must be permissionless.For that vision to succeed, this philosophy must be upheld at every level of the stack. LayerZero defends these values down to the packet level.When features are mutable, values can always be changed. Promises aren’t permanent. Decisions aren’t durable. Upgrades are risks. Eventually, systems are corrupted.Permanence and provability must be hard coded.That’s why LayerZero is here. That’s why LayerZero exists.LayerZero is built so you don’t have to trust others. It’s built so you can trust yourself.For more information on V2, check out this thread, read this article, or check out our docs.To learn more about LayerZero in general, check out the website. For additional information, the LayerZero Labs team is available to answer general questions on Discord and Telegram. You can also follow LayerZero Labs on X to receive the most up-to-date information.For specific inquiries:","creation_date":"2024-01-31","tags":["Blockchain","Web3","Technology","Cryptocurrency"],"author":"Mark Murdock","category":null}
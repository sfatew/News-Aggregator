{"id":"0b2dec6a-01ae-4c44-95be-056b9840ab5a","article_link":"https://medium.com/@ilaNihas/ritual-setting-up-your-validator-node-97ec2d86963d","website_source":"Medium","article_type":"Blog Post","summary":"Ritual is innovating an AI coprocessor for blockchains, aiming to smoothly integrate AI models into protocols, applications, or smart…","title":"\uD83C\uDF0DRitual: Setting Up Your Validator Node","detailed_content":"R\nitual is innovating an AI coprocessor for blockchains, aiming to smoothly integrate AI models into protocols, applications, or smart contracts with minimal coding. It serves as an open, sovereign execution layer that allows applications to incorporate AI across any blockchain. Ritual promotes the democratization of AI by enabling fine-tuning, monetization, and inference on models using cryptographic schemes, therefore promoting an ecosystem for decentralized AI. Their platform emphasizes privacy, censorship resistance, and verifiability, ensuring a broad, secure access to AI models globally. For developers, Ritual simplifies the integration process with an easy-to-use SDK, encouraging the contribution of GPU capacity for network support.Ritual’s SDK simplifies integrating AI with blockchain by offering tools that work with popular open-source libraries. It covers every step needed to create and use AI in blockchain applications, including preparing data, training AI models, ensuring the integrity of data and models using advanced verification methods, and managing data storage. The platform provides customizable scripts and tools, making it easier for users to use advanced AI features, like big language models, within their blockchain projects. This approach allows for smooth incorporation of AI capabilities into existing blockchain workflows, enhancing the functionalities and services offered by blockchain applications.To get a deeper understanding of Ritual’s unique architecture and its core components, I recommend visiting their product page. There, you’ll find an interactive protocol diagram that offers details on how the system is structured:In November 2023, Ritual announced a significant milestone, securing $25 million in funding from multipleinvestors. Additionaly, Ritual has started an strategic partnership with EigenLayer to develop new Actively Validated Services (AVSs). This collaboration aims to improve Ritual’s Infernet and blockchain infrastructure, while at the same time opening up new AI-native opportunities for operators on EigenLayer.To run a Ritual Node effectively, we’ll need:To get started with installing your node, you’ll first need to rent a VPS (Virtual Private Server). Using a VPS offers several advantages, such as enhanced performance, scalability and reliability. I’ll guide you through the process of renting a VPS at a lower cost, and show you how to configure it. Follow the steps below to get your VPS ready for the node installation. Research VPS providers: Take some time to explore different VPS providers available in the market. Consider factors like pricing, reputation, and customer reviews to find the right fit for your needs. Look for plans that offer the appropriate amount of resources (CPU, RAM, storage) to support your node. Contabo is my preferred choice due to their combination of affordable pricing, reliable performance, and user-friendly interface.I personally use and trust Contabo for my blockchain nodes. I’ve recently joined their affiliate program to recommend their services. If you decide to use my affiliate links for Contabo, you’ll be supporting my work at no extra cost to you. This support is important for continuing our journey together in the fascinating world of crypto, and using these affiliate links is a direct and impactful way to back my efforts. Thank you very much for your support!Minimum and recommended hardware specifications needed for this node:In setting up the node, we’ll follow the recommended hardware guidelines and choose the Cloud VPS 2 package.I will initially select a rental period of 1 month, with the flexibility to extend it later if needed:Make sure to choose the option “European Union (Germany)”:For the best storage solution, I recommend selecting the 400GB SSD storage type.To access Docker with Ubuntu 22.04, navigate to the “Apps & Panels” section and make the appropriate selection:To prioritize security, I highly recommend to generate a password and securely store it to ensure maximum protection:For the final step, it’s recommended to leave the sections titled “Object Storage”, “Networking”, and “Add-Ons” in their default state without any modifications. If you are new to Contabo, please create an account; otherwise, login using your existing credentials. Provide your personal data by filling in the required fields. Complete the remaining fields with your personal information, and click the “Next” button to proceed with the payment. After successfully completing the payment for your order, you will receive an initial email. Within approximately 15 minutes, you will receive a second email containing all the information needed to connect to your VPS.Download and install most recent edition of PuTTY by visiting the official website:You will find the IP adress of your VPS in the second email. Launch PuTTY, enter the IP address of your VPS and click “Open”:Once the server interface is open, you will be prompted to provide login details; simply enter “root” as the user and use your chosen password:Congratulations! You are now successfully logged into your server:To continue, we can update the packages by running the following commands in the terminal. The first part of the command (sudo apt update) updates the package lists for upgrades, and the second part (sudo apt upgrade -y) actually performs the upgrades with the “-y” flag allowing for automatic confirmation of prompts during the upgrade process:In this step, we’re preparing the system by installing essential build tools. Specifically, curl and git are used for downloading and managing code repositories, jq for processing JSON data, lz4 for compression and decompression, and build-essential for compiling software from source.Let’s now install Docker, this process will take a few minutes:Once the installation is complete, verify the version using the following command. The Docker version should be a minimum of 24.0.5.Next, let’s proceed with the installation of Docker Compose. Make sure to verify their GitHub repository for the most recent release and adjust the version and accordingly in this command:Use chmod to change the permissions of the Docker Compose directory:Verify the Docker Compose version; it should be at least v2.24.5:To set up and test the Web3 workflow with the Infernet Node, we’ll go through several steps including deploying a node with Infernet SDK contracts and deploying a simple consumer contract for our Web3 demo. After establishing this infrastructure, we’ll make a subscription request through our consumer contract to create an on-chain subscription. This process allows us to monitor the entire lifecycle of the subscription, from the node receiving the subscription event to processing it and finally sending the result back to the consumer contract on-chain. We begin by cloning the starter repository to our local machine and navigating to it, which is the foundation for deploying and testing the components:To ensure your Docker container continues running even if your VPS connection is lost, start a new screen session named “ritual” (or any name you prefer) using this command:Inside this screen session, you set up the hello-world project and all necessary services. We’ll use a single command that initiates the deployment process:We can now exit the session with CTRL + A + D, to detach from screen without disturbing it. To re-enter your session, you can use the screen -ls command to list all the detached (running) screens along with their respective screen IDs. The result will look like this:To connect or attach to a specific running screen, you can use the following command: screen -x [screen id], replacing [screen id] with the screen ID obtained from the output of the previous command, like this:It’s important to be familiar with these screen commands to avoid accidentally starting multiple screen sessions running the same tasks:After executing the deployment command and detaching from the screen session, we’ll verify the operation by opening a second terminal window to list all active Docker containers. This step requires establishing a new SSH connection to your VPS, which is basically the same process as in Step 2, ensuring you can monitor and manage the deployment process effectively:The output should look like this:To update your config.json file, open it in your second terminal window using the nano editor with this command:Please update the following in your configuration file:Your configuration file should look like this:After editing, save and close the file. If you’re using nano, you can do this by pressing CTRL + X, then Y to confirm the changes, and Enter to exitTo obtain your private key, it’s important to follow a secure process. The official MetaMask documentation provides a detailed guide on how to safely access your private key within the MetaMask wallet.In the final step, we need to adjust the following settings before we can initialize the new configuration.2. Update the Deployment Script: Go to the deployment script located at projects/hello-world/contracts/script/Deploy.s.sol. Use the following command to open the script for editing:These changes will ensure your project’s settings are updated with the correct network and wallet details.To apply your new configuration, including the updated wallet, restart the Docker container one by one in your second terminal session using these commands:Then, verify the restart by listing all running Docker containers using docker ps. Finally, to ensure your changes are active, use this command:Make sure to replace <CONTAINER ID> with the actual ID of the \"deploy-node-1\" container obtained from the docker ps command, like this:Once you restart the “deploy-node-1” container, the logs should now display your your wallet details.Inside the second terminal window we just started, we will now install Foundry which is a portable and modular toolkit for Ethereum application development written in Rust, using these commands:Next, it’s important to install the necessary dependencies to ensure smooth integration and deployment. This process involves navigating into the contract’s directory and installing required libraries and SDKs, using these commands:Monitoring the Anvil node’s logs during this process is beneficial to understand the deployment’s progress. For this, open a third terminal window and use the following command:Now, we’ll finally deploy a consumer contract designed to interact with the Infernet SDK. The example provided by the Ritual Team, a “SaysGM” contract, is straightforward: it requests a compute output from an Infernet Node and prints the result using the forge console. To deploy this contract, go back to your second terminal session and execute these commands:In the last step, you should switch to your third terminal window again where you’re monitoring the Anvil node. Look for a new transaction in the logs. If everything is set up correctly, you will notice a transaction indicating that your deployment and interactions with the blockchain are successful.Next, initiate a request to the Infernet Node by executing the following command in your second terminal session (= in the same session where you also deployed the SaysGM contract):This action will trigger an initiation transaction directed at the SaysGm contract, indicating the start of your contract interaction. Now, switch back to your third terminal window where you’re monitoring the Anvil node and look for a new message confirming the transaction, which signifies that your contract interaction has successfully initiated:Shortly after, you should see another transaction from the Infernet Node. This transaction represents the outcome of your on-chain subscription and its corresponding job request, completing the cycle of interaction with the blockchain and demonstrating the node’s processing capabilities.To register and activate your node on the Coordinator contract (0x8d871ef2826ac9001fb2e33fdd6379b6aabf449c) via Basescan, first, make sure you’re using the same Web3 wallet (like MetaMask) connected to your config.json file. For registration, input your wallet’s public address into the “node (address)” field of the “registerNode” function and confirm the transaction. After waiting for 1 hour, proceed to activate your node using the “activateNode” function. This process is important for integrating your node with the network.If the process is successful, you should be able to verify two transactions linked to your wallet on the Basescan explorer: one confirming the registration of your node and the other its activation.To ensure there are no errors across all Docker containers, you can check their logs with the following command. This step is important for identifying and resolving any potential issues that might be affecting your setup:Congratulations! You’ve successfully set up your Ritual node created an on-chain subscription request.As always, I recommend staying informed about Ritual by following their updates on Twitter and joining their Discord community. This way, you can keep up with all the latest news and information. For troubleshooting, consult the official documentation first, and if needed, seek assistance on the official Discord server or feel free to reach out to me directly on our Discord community.Hey everyone, I’m excited to share that I’ve partnered with Dotcom Canvas, a standout German brand known for its exquisite crypto-themed wall art. Their acrylic glass pieces are particularly impressive.Discover their unique collection via my affiliate link. For a special treat, use the code CRYPTOTRIBE at checkout to get a 15% discount. To see these art pieces in their full glory, take a peek at this promotional video. It’s a great way to visualize how they could elevate your space.Let’s enjoy some awesome crypto art together!Disclosure: By using my affiliate link for purchases, I receive a commission.Hi! I’m ilaNihas, a big football fan (or soccer, if you prefer). After 13 years in IT, I paused my career to explore crypto, blockchain, and Web3. I’m fascinated by the potential and constantly searching for interesting projects, airdrops, and new nodes to explore. Join me as I combine my passions for sports, writing, and tech. Let’s dive into the world of crypto and blockchain together!Thanks for reading! Please share your feedback in a comment and follow me on my socials if you enjoyed the article. I’ve also set up a Discord community where we can get together and have discussions about interesting crypto-related topics. You’re welcome to join us and be part of the conversation → https://discord.gg/zN4dH35JJZPlease note that the content provided on this blog is intended solely for educational, informational, and entertainment purposes and should not be considered as financial advice. In summary, always do your own research, evaluate the information critically, and seek professional advice when necessary. Stay informed, exercise caution, and make well-informed decisions based on your own unique circumstances.","creation_date":"2024-03-01","tags":["Ritual","Airdrop","Blockchain","Bitcoin","Cryptocurrency"],"author":"ilaNihas \uD83C\uDF0D","category":null}
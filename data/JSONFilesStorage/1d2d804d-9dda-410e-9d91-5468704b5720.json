{"id":"1d2d804d-9dda-410e-9d91-5468704b5720","article_link":"https://medium.com/@thaninsta/how-to-setup-a-taiko-node-and-holesky-rpc-client-1c9413396aec","website_source":"Medium","article_type":"Blog Post","summary":"This guide, will cover the configuration of a freshly installed VPS server as an Ethereum Holesky RPC client. Once the Holesky RPC client…","title":"How to Setup a Taiko Node and Holesky RPC Client","detailed_content":"This guide, will cover the configuration of a freshly installed VPS server as an Ethereum Holesky RPC client. Once the Holesky RPC client syncs it can be used as http:// and ws:// L1 endpoints for the Taiko Hekla node. This is a detailed guide, also including hints and tips of Linux commands for non-Linux experts. Hope you enjoy it and share with others.You can also follow me on Twitter or chat with me on Discord (0xthan0s)Step 1a: Get a VPSIf you want to run a Taiko Hekla proposer node then a VPS will work. However, for Taiko Hekla prover nodes the requirement is quite different. A prover node requires Intel SGX enabled processors. The ideal configuration is 8 cores and 16GB memory; the bare minimum is 4 cores and 8GB memory. Unfortunately, these processors are not available on VPS servers but rather on bare metal options. See here for a list of SGX compatible processors. In addition, the SGX machine needs to have a compatible FMSPC. For those that wish to run a Taiko Hekla prover node I highly recommend to be 100% sure that the SGX machine is FMSPC compatible. Step 10 of this guide will be dedicated to detailing the steps of enabling a prover successfully.For setting up a Taiko Hekla proposer, I will use a VPS. If you have a VPS server available this is great and you can skip to step 2. if not, I recommend Contabo. They have good options of VPS servers with a good value for money. You can see the available options here. For this guide I used a CLOUD VPS 5 (16 vCPU Cores, 64 GB RAM, 2 TB SSD, 3 Snapshots). 2TB SSD are required for storage, because the Holesky client databases are so IOPS-heavy. I will also utilize the three snapshots that the VPS offers, to mark recovery points of my installation. In case I make a mistake in the process, I can have a recovery point.Now you need to use the IP address of your server and an SSH client/terminal to access. Personally I use Termius. It provides some great features even in the free version and is available for desktop and mobile. You can download Termius here.On Termius, select Hosts -> New Host -> Type in the IP address of your server (in my example 000.000.000.000 but replace this with yours). Then give it a name like “ETH Holesky RPC + Taiko Server”; you will logon as root and also type the password that you provided in the previous step when you registered your new VPS with Contabo. Click connect.This is how it will look when you logon for the first time.Step 1b: Update Linux kernelBefore proceeding check the linux kernel version with command: uname -rLinux kernel, the base component of the OS, needs to be 6.0 or above for EDMM (Enclave Dynamic Memory Management), which Taiko nodes require. To update the kernel on Ubuntu 22.04 LTS , first run the super update command:Once completed then update the kernel with command:This process will take a few minutes. Once completed and back into root prompt, reboot the machine with command:Once the system reboots, reconnect with Termius and check the first line of the screen. Your kernel should be now updated.Tip: If you want to see all available Linux kernel versions run command:Step 2: Add User holeskyThe Ethereum Holesky client cannot be executed with user root. So for this purpose, we need to setup a new user which for instance, could be named holesky. To add user holesky, run command:The system will ask you to choose a password for this new user. Enter one, then confirm. Finally the system will ask for some additional non-important details (full name, room, phones, etc). Press enter to move to each next one.Now we need to give sudo privileges to this new user. On Ubuntu, the easiest way to grant sudo privileges to a user is by adding the user to the “sudo” group. Members of “sudo” group can execute any command as root via sudo and prompted to authenticate themselves with their password when using sudo. To give the sudo privileges to user holesky run the following command:This concludes step 2.Step 3: Docker InstallationWith the Ethereum Holesky client in perspective we will install Docker with user holesky. In case you are user root, switch to user holesky. To do this run command:Continue with the following command (the system may ask for user holesky password). Enter the password and execute.Note: the sudo apt-get update command is the most essential command in Linux to keep a system healthy and up-to-date. This command installs and downloads all the latest package information available for the packages currently installed on the system.To install Docker we need to first setup the Docker repo by running the following batch of commands. You can copy and paste the batch of commands and these will be executed sequentially.After the batch of commands is executed we need to install the latest Docker version by running the following command:Select Y and enter when prompted. This process will take a few minutes. Finally to verify Docker installation run command:This will print a confirmation message “Hello from Docker!” and exit.Post-Installation Steps (applies as we installed Docker as non-root user)The Docker daemon binds to a Unix socket, not a TCP port. By default it’s the root user that owns the Unix socket, and other users can only access it using sudo. The Docker daemon always runs as the root user.If you don’t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group. On some Linux distributions, the system automatically creates this group when installing Docker Engine using a package manager. In that case, there is no need for you to manually create the group.Create the Docker group with command:Most probably you will receive a message that the group already exists. Fine, it’s always good to check. Add user holesky to the Docker group with command:Now switch to user root with command su - root password etc. and switch immediately back to user holesky with command su - holesky. Now check that you can run Docker commands with user holesky without usingsudo:Docker is now installed. Next step Git.Step 4: Git InstallationTo install Git with user holesky, run the following command:Select Y and enter when prompted. This process will take a few minutes. Verify Git installation with command:Step 5: Holesky Client ConfigurationNow let’s get the Holesky client up and running. First we need to clone eth-docker. With user holesky, run command:Once cloning finishes, you are now in eth-docker directory. Run command:Answer “yes” to both questions.Now run command:Fantastic! The Holesky archive node is almost ready.Now we need to configure the Eth Docker. Have an Ethereum wallet address handy here. Run command:The pink configuration screen will appear. First, select Holesky network (Holešovice is a district in the north of Prague situated on a meander of the River Vltava. It is the coolest and most vibrant district of the city).Select Ethereum RPC node.Select Lighthouse (Rust).Select Geth (Go).Select the recommended value. Click here for a list of other Ethereum Beacon Chain checkpoint sync endpoints.The consensus layer client will connect to the mev-boost container. So “Yes” to using MEV Boost.For MEV relays, the relay value is not visible in this screen here but it does populate in the configuration file. So press enter to proceed. MEV relays can be retrieved from here.Yes Grafana is cool and we want to use it. We will see in a nice dashboard how the Holesky client syncs and operates.Here put the address of an ETH wallet. Always choose a test wallet. After confirming the wallet, ethd terminates with exit and the below screen.Important-don’t start the client yet: We have one very critical change to do in the configuration file plus one more related to Contabo VPS only. The configuration of the Holesky client is stored in file .env. In this file we need to change the following configuration parameters:To do these changes we need to edit the configuration file with the nano editor. So with user holesky and under directory eth-docker run command:To expose the node’s RPC ports (for a Taiko node to make calls to it), we need to append el-shared.yml to the list of files in the COMPOSE_FILE variable of the .env file. Go to line #3 of the configuration file and type in “:el-shared.yml”.Then edit the configuration file, around line #144 and change the value of variable ARCHIVE_NODE to “false” (CTRL-S to save the configuration file and then CTRL-X to exit), finally start the Holesky client again with command:Good to go!The change related to Contabo VPS only: To address the known issue of head jamming, change value CL_P2P_PORT (around line 83) from “9000” to “7000”. Taiko Admins on Discord also recommend to change PRYSM_PORT and PRYSM_UDP_PORT values from “9000” to “7000” as well.Once all required values are changed press CTRL-S to save the configuration file and then CTRL-X to exit.\nCongratulations!!! We are now ready to start the Holesky client.\nIf you are using the system with user root you need to revert to user holesky. To do this, run command (password may be required):Then execute command ls to see folders and files under user holesky.All files and folders utilized by the Holesky client are in directory eth-docker. To open the directory execute command:Check the contents with command ls and locate eth docker file ethd.Start the client with command:Now the client will take sometime to sync. We can follow the sync process and also check operational statistics with the Grafana dashboard.Step 6: Grafana dashboard for Holesky client (port 3000)The dashboard is by default open to port 3000. Open a browser, insert your server’s IP address add a column and the port 3000 and press enter.The browser will open the Grafana logon screen. The default user name is admin and the default password is again admin. Grafana will request you to choose your own password.Once you enter Grafana environment select Home, then Dashboards. You can use the default eth-docker dashboard. I also use the ETH Docker Logs dashboard.Grafana eth-docker dashboard looks like this. Watch for the blocks increasing and synchronizing and the chain head having this triangular shape. Once the client reaches current block, then synchronization is achieved.The current block of Eth Holesky can be seen here. Below image shows the client synchronized with the blockchain.Holesky client: Stopping, Starting, Updating and Log ReviewingHere are a few commands for service management and log reviews of the Holesky client. As always, add sudo to these commands if the user is not part of the docker group.Step 7: Run a Taiko Hekla NodeIn this guide I will install the Taiko node with user root. The prerequisites of Docker and Git are already installed in previous steps. There are two methods to run a Taiko node: with stn and with simple-taiko-node. For the purpose of this guide I will run the Taiko node with simple-taiko-node. If you wish to tryout the stn method revert to Taiko Docs.First we need to clone simple-taiko-node from Github. Run command:Once this command completes then open directory simple-taiko-node by running the following command:Now copy the configuration file with command:Now we need to edit the configuration file and set the L1 Holesky archive client endpoints and the beacon client. On Taiko Discord you can see the pinned beacon client.So to edit the configuration file run command:Change the two L1 endpoints in the configuration file, as per below:L1_ENDPOINT_HTTP=http://192.168.1.1:8545L1_ENDPOINT_WS=ws://192.168.1.1:8546Make sure to replace 192.168.1.1 of my example above, with the IP of YOUR Holesky client.Also change the L1_BEACON_HTTP=http://unstable.holesky.beacon-api.nimbus.team/Once the required values are changed press CTRL-S to save the configuration file and then CTRL-X to exit. Now we are ready to start the Taiko Node.Note: In case you ran a Taiko node previously, make sure to first remove the old volumes with command:As user root, start the node with command:Once the node starts, check if the Execution Layer client is connected to Taiko L2 with the following command copy and paste as-is.This command should return the chainId as 0x28c61\n{ “jsonrpc”: “2.0”, “id”: 1, “result”: “0x28c61” }Also check if the Execution Layer client is synced by requesting the latest Taiko L2 / L3 block from the Execution Layer client:If the blockNumber response value is 0 or not growing, check the Taiko L2 logs with command:Step 8: Grafana dashboard for Taiko Hekla node (port 3001)The dashboard is by default open to port 3001. Open a browser, insert your server’s IP address add a column and the port 3001 and press enter.Grafana L2ExecutionEngine dashboard looks like this. Watch for the blocks increasing and synchronizing and the chain head having this triangular shape. Once the client reaches current block, then synchronization is achieved. The current block of Taiko Hekla can be seen here.Once the node is synced then we can proceed to additional steps to enable the node as a proposer (this guide will be updated shortly).Taiko node: Stopping, Starting, Updating and Log ReviewingHere are a few commands for service management and log reviews of the Taiko node. As always, add sudo to these commands if the user is not part of the docker group.Step 9: Enable a Taiko Hekla ProposerOnce the node from the previous step syncs with the Taiko blockchain we can proceed to the next step and enable a Taiko Hekla proposer node. The steps are very simple to achieve. It only requires a a few changes in the configuration file. So in directory simple-taiko-node run command:In the configuration file we need to change the following configuration parameters:Once all required values are changed press CTRL-S to save the configuration file and then CTRL-X to exit. Now we are ready to restart the Taiko Node in order for the parameters to be activated. As user root, stop the node with command:The start the node with command:You can also use the restart sequence which combines both commands:You can also check blocks proposed (with success or fail) using holesky etherscan. Copy and paste the proposer wallet address.In Holesky etherscan you can see blocks proposed successfully (in green rectangle) and blocks proposed with fail. Failed propose blocks means that the proposer tried to propose but another proposer did it faster and cheaper, hence the failure. You need to DYOR and understand what works better for you and the market. Finally, on holesky etherscan you can also see the transaction fee in ETH. Happy proposing!!Taiko Proposer: Stopping, Starting, and Log ReviewingHere are a few commands for service management and log reviews of the Taiko Proposer node. As always, add sudo to these commands if the user is not part of the docker group.The DojonodeWolfez and Helios of the Taiko team created this beautiful node monitoring dashboard, where you can see at a glance, everything that matters around your proposer or prover: this is the Dojonode.To install the Dojonode, execute the below transactions.To call the Dojonode, just type the IP address of your node on the browser and add port 7744. Then just click on the \uD83D\uDCE1 button and change “localhost” to the IP address of your node. You can also add the wallet so the node can monitor proposed blocks, proved blocks and the balance of ETH in Holesky testnet and Hekla testnet.See here for more information about the Dojonode. Enjoy and give a shoutout to Wolfez and Helios.Step 10: Enable a Taiko Hekla ProverThis is going to be a lengthy one, as enabling a prover requires a lot of steps. First things first, for an SGX AND FMSPC compatible machine I have chosen OVH. For the purpose of this guide I have used a Rise-3 dedicated server. If you choose OVH, then before everything else you need to enable SGX. This is available as an option on the server management page. Once enabled, you will have to reboot. Once the green “Enabled” indication is visible you are good to go.Prerequisites from previous steps:In this guide, I will install the Taiko Hekla prover with user root.\nBy default, OVH does not allow login to the root account via SSH. You will only have access with a generic user named “ubuntu”. In case you proceed with an OVH server, then run the following commands one by one:Now you will be able to connect your OVH machine with user root.Note: Intel SGX is a technology that requires extensive configuration, with setups varying considerably based on the attestation type (EPID, ECDSA). Although Taiko team has made efforts to simplify the development environment setup, some prerequisites are too complex to automate fully with Dockerfiles.It’s important, however, to understand these steps, even though machines like the OVH Rise-3, are proven to be SGX/FMSPC compatible. Analyzing the configuration process will provide deeper insights and understanding.Step 10.1: Install cpuid toolTo verify if the CPU is SGX-enabled, we need to install the cpuid tool. So run command:Then run command:If you see the below result then the CPU is SGX-enabled.Step 10.2: Create an Intel PCS accountAs per Taiko instructions, the ECDSA attestation requires a subscription to the Intel PCS service here (instructions here). This subscription will provide us with a primary API key and a secondary API key. These keys are required and will be used in the next steps.Step 10.3: Determine FMSPC support | Install PCKIDRetrievalToolThis is a mandatory step to ensure that the SGX-enabled machine is supported by Raiko. Currently the supported FMSPCs are only:\n00606A000000\n00A067110000\n00906ED50000To install the tool run the following commands (enter “Y” where asked):Once the tool is installed then run the below command to retrieve FMSPC.You will be asked to enter the Intel PCS API key from step 10.2. Here you can enter either the primary API key or the secondary API key. You will also be asked for a pccs password; just press Enter.You will receive the FMSPC key.Step 10.4: Install GramineAs per Taiko team, Raiko leverages Intel SGX via Gramine. Here you can see the available distributions. In our case we will install Gramine for Ubuntu 22.04 with a Bash script. You can find more information about scripts here.To install Gramine, we will create a script called install_gramine.sh and in this file we will insert all the installation commands, plus two extra lines to mark the beginning and end of the script. Copy and paste the script as below.The script file, install_gramine.sh, is now ready to be executed with the below command. This will take a few minutes. Respond with “Y” when required.Gramine is now installed.Step 10.5: Additional installationsExecute the command below to prepare the prover with some additional required installations.Step 10.6: Generate PCCS certificates and edit default.json fileThis step is related to SGX-specific requirements about configuring PCCS (Provisioning Certificate Caching Service). PCCS retrieves PCK certificates during runtime and then caches them in the local database. PCCS uses the same http interfaces as Intel PCS.To generate the certificate run the below commands one by one. Note that the firsst openssl command will require some additional information. You can ignore all, perhaps enter an email when requested.How the output looks.During the next step the system will generate the below error. As per the Taiko team it should be ignored.But in case you have coding error PTSD (like myself) and would like to install the latest version of nodejs and avoid the error, below are the commands to achieve this.You can also check the installed nodejs version with command: node -v\nNext run the below commands to generate the default.json file and then copy it. There might be an error related to cracklib-runtime, ignore it.Now let’s edit the default.json file, which you can see with the ls command.We need to edit four parameters in the default.json file. You can edit default.json with command:hosts: replace it with \"0.0.0.0\"\nApiKey: Use either the Intel PCS primary or secondary key you obtained from step 10.2.\nUserTokenHash: Here you just have to execute command echo -n \"user_password\" | sha512sum | tr -d '[:space:]-'), where you can replace “user _password” with any string.In this case, I executed the command as-is, with no change. Take the value 6ae2d3bfb3b95517b358fcdb29……02920ddeb1a6c6df4e8a00 and paste to UserTokenHash.AdminTokenHash: Similarly, here you just have to execute command echo -n \"admin_password\" | sha512sum | tr -d '[:space:]-'. Again, I executed the command as-is, with no change. Take the value 31a556961f3438f9f632ca27812d……97937c28310a7ab62a9ae1c15d96d69 and paste to AdminTokenHash.Once the required values are changed press CTRL-S to save the default.json file and then CTRL-X to exit.Very important, run the below command to modify the permissions of default.jsonFinally, create the below directories, one by one.Step 10.7: Clone and Bootstrap RaikoNow let’s clone Raiko and build the docker images. Firstly, execute the below command.Now before building the image, we need to check parameter “sgx.max_threads” in the configuration file “sgx-guest.docker.manifest.template” and make sure the value is “32”. Execute the next set of commands.You should be able to see this fileEdit the file as below.If the value “sgx.max_threads” is “32” then CTRL-X and exit. If it is “16” then change to “32” and then CTRL-S to save and CTRL-X to exit.Once this change is done, then we can build the image. Execute below commands and then lay back and watch the show. This will take sometime.Once complete you will see the screen as above. Now run the following command.You should be able to see at least the following two images: gcr.io/evmchain/raiko and gcr.io/evmchain/pccs.Now you are ready to bootstrap Raiko. Execute the next command.If everything is executed correctly then raiko-init exited with code 0 and you should be able to see a Public key, an Instance address and a quote.Bootstrapping should also generate a bootstrap.json which contains the relavant information and you can check with the following command.It should look like the below example. The “quote” is quite a lengthy string and we will need this later on.Now Raiko is ready to be executed through Docker. Next step to attest the prover on-chain, receive some TTKOh and start proving!Step 10.8: Perform on-chain remote AttestationAs a first step, let’s clone taiko-mono with command:Then open directory “protocol”:Now run the below commands:And continue with the below commands:The compiler will inform you in the end if everything is successful.At this stage you need to define the private key of the wallet that you are going to use on this prover. Always use a new fresh wallet. Run the below command filling your private key.Next step open folder script and look for config_dcap_sgx_verifier.shAs per Taiko Docs, we need to compare the below three values with what is in the config_dcap_sgx_verifier.shscript. These three values are:SGX_VERIFIER_ADDRESS=0x532EFBf6D62720D0B2a2Bb9d11066E8588cAE6D9 ATTESTATION_ADDRESS=0xC6cD3878Fc56F2b2BaB0769C580fc230A95e1398 PEM_CERTCHAIN_ADDRESS=0x08d7865e7F534d743Aba5874A9AD04bcB223a92ETo compare we need to view the config_dcap_sgx_verifier.shscript. We can do this as follows. Edit the script with command:As you can see from the above screenshot the values match. Now CTRL-X to exit the script without saving.Once the values are confirmed we move to the next step where we will utilize the quote that we obtained earlier, when we bootstrapped Raiko.… this is a work in progress! If you would like to continue on your own, you can consult the very detailed documentation on Taiko Docs.","creation_date":"2024-01-28","tags":["Holesky Testnet","Taiko","Blockchain"],"author":"0xThanos","category":null}